
package com.schneider.ims.service.company.impl.uimsv2;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import com.schneider.ims.service.uimsv2.CompanyV3;
import com.schneider.ims.service.uimsv2.ObjectFactory;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "AuthenticatedCompanyManager_UIMSV2", targetNamespace = "http://uimsv2.service.ims.schneider.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface AuthenticatedCompanyManagerUIMSV2 {


    /**
     * 
     * @param federatedId
     * @param goldenId
     * @param callerFid
     * @return
     *     returns com.schneider.ims.service.uimsv2.CompanyV3
     * @throws InvalidImsServiceMethodArgumentException
     * @throws IMSServiceSecurityCallNotAllowedException
     * @throws RequestedEntryNotExistsException
     * @throws LdapTemplateNotReadyException
     * @throws UnexpectedRuntimeImsException
     * @throws UnexpectedLdapResponseException
     */
    @WebMethod
    @WebResult(name = "company", targetNamespace = "")
    @RequestWrapper(localName = "getCompanyByGoldenId", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.GetCompanyByGoldenId")
    @ResponseWrapper(localName = "getCompanyByGoldenIdResponse", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.GetCompanyByGoldenIdResponse")
     CompanyV3 getCompanyByGoldenId(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "federatedId", targetNamespace = "")
        String federatedId,
        @WebParam(name = "goldenId", targetNamespace = "")
        String goldenId)
        throws IMSServiceSecurityCallNotAllowedException, InvalidImsServiceMethodArgumentException, LdapTemplateNotReadyException, RequestedEntryNotExistsException, UnexpectedLdapResponseException, UnexpectedRuntimeImsException
    ;

    /**
     * 
     * @param template
     * @param callerFid
     * @return
     *     returns java.util.List<com.schneider.ims.service.uimsv2.CompanyV3>
     * @throws IMSServiceSecurityCallNotAllowedException
     * @throws InvalidImsServiceMethodArgumentException
     * @throws LdapTemplateNotReadyException
     * @throws UnexpectedRuntimeImsException
     */
    @WebMethod
    @WebResult(name = "companies", targetNamespace = "")
    @RequestWrapper(localName = "searchPublicCompany", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.SearchPublicCompany")
    @ResponseWrapper(localName = "searchPublicCompanyResponse", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.SearchPublicCompanyResponse")
     List<CompanyV3> searchPublicCompany(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "template", targetNamespace = "")
        CompanyV3 template)
        throws IMSServiceSecurityCallNotAllowedException, InvalidImsServiceMethodArgumentException, LdapTemplateNotReadyException, UnexpectedRuntimeImsException
    ;

    /**
     * 
     * @param companyId
     * @param userFederatedId
     * @param callerFid
     * @return
     *     returns com.schneider.ims.service.uimsv2.CompanyV3
     * @throws InvalidImsServiceMethodArgumentException
     * @throws IMSServiceSecurityCallNotAllowedException
     * @throws RequestedEntryNotExistsException
     * @throws UnexpectedRuntimeImsException
     * @throws LdapTemplateNotReadyException
     * @throws UnexpectedLdapResponseException
     */
    @WebMethod
    @WebResult(name = "company", targetNamespace = "")
    @RequestWrapper(localName = "getCompany", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.GetCompany")
    @ResponseWrapper(localName = "getCompanyResponse", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.GetCompanyResponse")
     CompanyV3 getCompany(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "userFederatedId", targetNamespace = "")
        String userFederatedId,
        @WebParam(name = "companyId", targetNamespace = "")
        String companyId)
        throws IMSServiceSecurityCallNotAllowedException, InvalidImsServiceMethodArgumentException, LdapTemplateNotReadyException, RequestedEntryNotExistsException, UnexpectedLdapResponseException, UnexpectedRuntimeImsException
    ;

    /**
     * 
     * @param federatedId
     * @param company
     * @param callerFid
     * @return
     *     returns java.lang.String
     * @throws InvalidImsServiceMethodArgumentException
     * @throws IMSServiceSecurityCallNotAllowedException
     * @throws RequestedEntryNotExistsException
     * @throws UnexpectedRuntimeImsException
     * @throws LdapTemplateNotReadyException
     * @throws UnexpectedLdapResponseException
     * @throws RequestedInternalUserException
     */
    @WebMethod
    @WebResult(name = "companyId", targetNamespace = "")
    @RequestWrapper(localName = "createCompany", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.CreateCompany")
    @ResponseWrapper(localName = "createCompanyResponse", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.CreateCompanyResponse")
     String createCompany(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "federatedId", targetNamespace = "")
        String federatedId,
        @WebParam(name = "company", targetNamespace = "")
        CompanyV3 company)
        throws IMSServiceSecurityCallNotAllowedException, InvalidImsServiceMethodArgumentException, LdapTemplateNotReadyException, RequestedEntryNotExistsException, RequestedInternalUserException, UnexpectedLdapResponseException, UnexpectedRuntimeImsException
    ;

    /**
     * 
     * @param federatedId
     * @param invitationId
     * @param callerFid
     * @return
     *     returns com.schneider.ims.service.uimsv2.CompanyV3
     * @throws InvalidImsServiceMethodArgumentException
     * @throws IMSServiceSecurityCallNotAllowedException
     * @throws RequestedEntryNotExistsException
     * @throws UnexpectedRuntimeImsException
     * @throws LdapTemplateNotReadyException
     * @throws UnexpectedLdapResponseException
     * @throws SecuredImsException
     */
    @WebMethod
    @WebResult(name = "company", targetNamespace = "")
    @RequestWrapper(localName = "getCompanyByInvitationUid", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.GetCompanyByInvitationUid")
    @ResponseWrapper(localName = "getCompanyByInvitationUidResponse", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.GetCompanyByInvitationUidResponse")
     CompanyV3 getCompanyByInvitationUid(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "federatedId", targetNamespace = "")
        String federatedId,
        @WebParam(name = "invitationId", targetNamespace = "")
        String invitationId)
        throws IMSServiceSecurityCallNotAllowedException, InvalidImsServiceMethodArgumentException, LdapTemplateNotReadyException, RequestedEntryNotExistsException, SecuredImsException, UnexpectedLdapResponseException, UnexpectedRuntimeImsException
    ;

    /**
     * 
     * @param forcedId
     * @param federatedId
     * @param company
     * @param callerFid
     * @return
     *     returns java.lang.String
     * @throws IMSServiceSecurityCallNotAllowedException
     * @throws InvalidImsServiceMethodArgumentException
     * @throws RequestedEntryNotExistsException
     * @throws LdapTemplateNotReadyException
     * @throws UnexpectedRuntimeImsException
     * @throws ForcedFidAlreadyExistException
     * @throws UnexpectedLdapResponseException
     * @throws SecuredImsException
     * @throws RequestedInternalUserException
     */
    @WebMethod
    @WebResult(name = "companyId", targetNamespace = "")
    @RequestWrapper(localName = "createCompanyForceIdmsId", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.CreateCompanyForceIdmsId")
    @ResponseWrapper(localName = "createCompanyForceIdmsIdResponse", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.CreateCompanyForceIdmsIdResponse")
     String createCompanyForceIdmsId(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "federatedId", targetNamespace = "")
        String federatedId,
        @WebParam(name = "company", targetNamespace = "")
        CompanyV3 company,
        @WebParam(name = "forcedId", targetNamespace = "")
        String forcedId)
        throws ForcedFidAlreadyExistException, IMSServiceSecurityCallNotAllowedException, InvalidImsServiceMethodArgumentException, LdapTemplateNotReadyException, RequestedEntryNotExistsException, RequestedInternalUserException, SecuredImsException, UnexpectedLdapResponseException, UnexpectedRuntimeImsException
    ;

    /**
     * 
     * @param template
     * @param userFederatedId
     * @param callerFid
     * @return
     *     returns java.util.List<com.schneider.ims.service.uimsv2.CompanyV3>
     * @throws InvalidImsServiceMethodArgumentException
     * @throws IMSServiceSecurityCallNotAllowedException
     * @throws RequestedEntryNotExistsException
     * @throws LdapTemplateNotReadyException
     * @throws UnexpectedRuntimeImsException
     * @throws UnexpectedLdapResponseException
     */
    @WebMethod
    @WebResult(name = "companies", targetNamespace = "")
    @RequestWrapper(localName = "searchCompany", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.SearchCompany")
    @ResponseWrapper(localName = "searchCompanyResponse", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.SearchCompanyResponse")
     List<CompanyV3> searchCompany(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "userFederatedId", targetNamespace = "")
        String userFederatedId,
        @WebParam(name = "template", targetNamespace = "")
        CompanyV3 template)
        throws IMSServiceSecurityCallNotAllowedException, InvalidImsServiceMethodArgumentException, LdapTemplateNotReadyException, RequestedEntryNotExistsException, UnexpectedLdapResponseException, UnexpectedRuntimeImsException
    ;

    /**
     * 
     * @param companyId
     * @param federatedId
     * @param company
     * @param callerFid
     * @return
     *     returns boolean
     * @throws IMSServiceSecurityCallNotAllowedException
     * @throws InvalidImsServiceMethodArgumentException
     * @throws RequestedEntryNotExistsException
     * @throws LdapTemplateNotReadyException
     * @throws UnexpectedRuntimeImsException
     * @throws UnexpectedLdapResponseException
     * @throws SecuredImsException
     */
    @WebMethod
    @WebResult(name = "success", targetNamespace = "")
    @RequestWrapper(localName = "updateCompany", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.UpdateCompany")
    @ResponseWrapper(localName = "updateCompanyResponse", targetNamespace = "http://uimsv2.service.ims.schneider.com/", className = "com.schneider.ims.service.uimsv2.UpdateCompanyResponse")
     boolean updateCompany(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "federatedId", targetNamespace = "")
        String federatedId,
        @WebParam(name = "companyId", targetNamespace = "")
        String companyId,
        @WebParam(name = "company", targetNamespace = "")
        CompanyV3 company)
        throws IMSServiceSecurityCallNotAllowedException, InvalidImsServiceMethodArgumentException, LdapTemplateNotReadyException, RequestedEntryNotExistsException, SecuredImsException, UnexpectedLdapResponseException, UnexpectedRuntimeImsException
    ;

}
