
package com.se.uims.usermanager;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "UserManager_UIMSV22", targetNamespace = "http://uimsv22.service.ims.schneider.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface UserManagerUIMSV22 {


    /**
     * 
     * @param authentificationToken
     * @param callerFid
     * @return
     *     returns boolean
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws InactiveUserImsException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     * @throws RequestedInternalUserException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateEmail", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.UpdateEmail")
    @ResponseWrapper(localName = "updateEmailResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.UpdateEmailResponse")
    public boolean updateEmail(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "authentificationToken", targetNamespace = "")
        String authentificationToken)
        throws IMSServiceSecurityCallNotAllowedException_Exception, InactiveUserImsException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, RequestedInternalUserException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param phoneId
     * @param callerFid
     * @param smsToken
     * @return
     *     returns boolean
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws InactiveUserImsException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     * @throws RequestedInternalUserException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updatePhoneId", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.UpdatePhoneId")
    @ResponseWrapper(localName = "updatePhoneIdResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.UpdatePhoneIdResponse")
    public boolean updatePhoneId(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "phoneId", targetNamespace = "")
        String phoneId,
        @WebParam(name = "smsToken", targetNamespace = "")
        String smsToken)
        throws IMSServiceSecurityCallNotAllowedException_Exception, InactiveUserImsException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, RequestedInternalUserException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param samlAssertion
     * @param callerFid
     * @return
     *     returns com.se.uims.usermanager.AccessTree
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws InactiveUserImsException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAccessControl", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.GetAccessControl")
    @ResponseWrapper(localName = "getAccessControlResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.GetAccessControlResponse")
    public AccessTree getAccessControl(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "samlAssertion", targetNamespace = "")
        String samlAssertion)
        throws IMSServiceSecurityCallNotAllowedException_Exception, InactiveUserImsException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param authentificationToken
     * @param callerFid
     * @return
     *     returns boolean
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     * @throws RequestedInternalUserException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "activateIdentityNoPassword", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.ActivateIdentityNoPassword")
    @ResponseWrapper(localName = "activateIdentityNoPasswordResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.ActivateIdentityNoPasswordResponse")
    public boolean activateIdentityNoPassword(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "authentificationToken", targetNamespace = "")
        String authentificationToken)
        throws IMSServiceSecurityCallNotAllowedException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, RequestedInternalUserException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param samlAssertion
     * @param callerFid
     * @return
     *     returns java.util.List<com.se.uims.usermanager.Program>
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws InactiveUserImsException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPrograms", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.GetPrograms")
    @ResponseWrapper(localName = "getProgramsResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.GetProgramsResponse")
    public List<Program> getPrograms(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "samlAssertion", targetNamespace = "")
        String samlAssertion)
        throws IMSServiceSecurityCallNotAllowedException_Exception, InactiveUserImsException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param password
     * @param phoneId
     * @param tokenType
     * @param callerFid
     * @param smsToken
     * @return
     *     returns boolean
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws InactiveUserImsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     * @throws RequestedInternalUserException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "setPasswordWithSms", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.SetPasswordWithSms")
    @ResponseWrapper(localName = "setPasswordWithSmsResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.SetPasswordWithSmsResponse")
    public boolean setPasswordWithSms(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "phoneId", targetNamespace = "")
        String phoneId,
        @WebParam(name = "smsToken", targetNamespace = "")
        String smsToken,
        @WebParam(name = "tokenType", targetNamespace = "")
        String tokenType,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws IMSServiceSecurityCallNotAllowedException_Exception, InactiveUserImsException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, RequestedInternalUserException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param samlAssertion
     * @param application
     * @param newPhoneId
     * @param callerFid
     * @return
     *     returns boolean
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws ImsMailerException_Exception
     * @throws InactiveUserImsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     * @throws RequestedInternalUserException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "requestPhoneIdChange", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.RequestPhoneIdChange")
    @ResponseWrapper(localName = "requestPhoneIdChangeResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.RequestPhoneIdChangeResponse")
    public boolean requestPhoneIdChange(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "samlAssertion", targetNamespace = "")
        String samlAssertion,
        @WebParam(name = "application", targetNamespace = "")
        AccessElement application,
        @WebParam(name = "newPhoneId", targetNamespace = "")
        String newPhoneId)
        throws IMSServiceSecurityCallNotAllowedException_Exception, ImsMailerException_Exception, InactiveUserImsException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, RequestedInternalUserException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param samlAssertion
     * @param user
     * @param callerFid
     * @return
     *     returns boolean
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws InactiveUserImsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateUser", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.UpdateUser")
    @ResponseWrapper(localName = "updateUserResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.UpdateUserResponse")
    public boolean updateUser(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "samlAssertion", targetNamespace = "")
        String samlAssertion,
        @WebParam(name = "user", targetNamespace = "")
        UserV6 user)
        throws IMSServiceSecurityCallNotAllowedException_Exception, InactiveUserImsException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param authentificationToken
     * @param callerFid
     * @return
     *     returns boolean
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "acceptUserMerge", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.AcceptUserMerge")
    @ResponseWrapper(localName = "acceptUserMergeResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.AcceptUserMergeResponse")
    public boolean acceptUserMerge(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "authentificationToken", targetNamespace = "")
        String authentificationToken)
        throws IMSServiceSecurityCallNotAllowedException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param samlAssertion
     * @param application
     * @param newEmail
     * @param callerFid
     * @return
     *     returns boolean
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws ImsMailerException_Exception
     * @throws InactiveUserImsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     * @throws RequestedInternalUserException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "requestEmailChange", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.RequestEmailChange")
    @ResponseWrapper(localName = "requestEmailChangeResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.RequestEmailChangeResponse")
    public boolean requestEmailChange(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "samlAssertion", targetNamespace = "")
        String samlAssertion,
        @WebParam(name = "application", targetNamespace = "")
        AccessElement application,
        @WebParam(name = "newEmail", targetNamespace = "")
        String newEmail)
        throws IMSServiceSecurityCallNotAllowedException_Exception, ImsMailerException_Exception, InactiveUserImsException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, RequestedInternalUserException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param password
     * @param authentificationToken
     * @param callerFid
     * @return
     *     returns boolean
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws InactiveUserImsException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     * @throws RequestedInternalUserException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "validateEmailAndSetPassword", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.ValidateEmailAndSetPassword")
    @ResponseWrapper(localName = "validateEmailAndSetPasswordResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.ValidateEmailAndSetPasswordResponse")
    public boolean validateEmailAndSetPassword(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "authentificationToken", targetNamespace = "")
        String authentificationToken,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws IMSServiceSecurityCallNotAllowedException_Exception, InactiveUserImsException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, RequestedInternalUserException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param samlAssertion
     * @param oldPassword
     * @param newPassword
     * @param callerFid
     * @return
     *     returns boolean
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws InactiveUserImsException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updatePassword", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.UpdatePassword")
    @ResponseWrapper(localName = "updatePasswordResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.UpdatePasswordResponse")
    public boolean updatePassword(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "samlAssertion", targetNamespace = "")
        String samlAssertion,
        @WebParam(name = "oldPassword", targetNamespace = "")
        String oldPassword,
        @WebParam(name = "newPassword", targetNamespace = "")
        String newPassword)
        throws IMSServiceSecurityCallNotAllowedException_Exception, InactiveUserImsException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param password
     * @param authentificationToken
     * @param callerFid
     * @return
     *     returns boolean
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     * @throws RequestedInternalUserException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "activateIdentity", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.ActivateIdentity")
    @ResponseWrapper(localName = "activateIdentityResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.ActivateIdentityResponse")
    public boolean activateIdentity(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "authentificationToken", targetNamespace = "")
        String authentificationToken)
        throws IMSServiceSecurityCallNotAllowedException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, RequestedInternalUserException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param authentificationToken
     * @param phoneId
     * @param callerFid
     * @return
     *     returns boolean
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     * @throws RequestedInternalUserException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "activateIdentityWithMobileNoPassword", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.ActivateIdentityWithMobileNoPassword")
    @ResponseWrapper(localName = "activateIdentityWithMobileNoPasswordResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.ActivateIdentityWithMobileNoPasswordResponse")
    public boolean activateIdentityWithMobileNoPassword(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "phoneId", targetNamespace = "")
        String phoneId,
        @WebParam(name = "authentificationToken", targetNamespace = "")
        String authentificationToken)
        throws IMSServiceSecurityCallNotAllowedException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, RequestedInternalUserException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param authentificationToken
     * @param callerFid
     * @return
     *     returns boolean
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "rejectUserMerge", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.RejectUserMerge")
    @ResponseWrapper(localName = "rejectUserMergeResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.RejectUserMergeResponse")
    public boolean rejectUserMerge(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "authentificationToken", targetNamespace = "")
        String authentificationToken)
        throws IMSServiceSecurityCallNotAllowedException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, SecuredImsException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param password
     * @param authentificationToken
     * @param callerFid
     * @return
     *     returns boolean
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws InactiveUserImsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "setPassword", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.SetPassword")
    @ResponseWrapper(localName = "setPasswordResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.SetPasswordResponse")
    public boolean setPassword(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "authentificationToken", targetNamespace = "")
        String authentificationToken,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws IMSServiceSecurityCallNotAllowedException_Exception, InactiveUserImsException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

    /**
     * 
     * @param samlAssertionOrToken
     * @param callerFid
     * @return
     *     returns com.se.uims.usermanager.UserV6
     * @throws IMSServiceSecurityCallNotAllowedException_Exception
     * @throws SecuredImsException_Exception
     * @throws RequestedEntryNotExistsException_Exception
     * @throws LdapTemplateNotReadyException_Exception
     * @throws UnexpectedRuntimeImsException_Exception
     * @throws UnexpectedLdapResponseException_Exception
     * @throws InvalidImsServiceMethodArgumentException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUser", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.GetUser")
    @ResponseWrapper(localName = "getUserResponse", targetNamespace = "http://uimsv22.service.ims.schneider.com/", className = "com.se.uims.usermanager.GetUserResponse")
    public UserV6 getUser(
        @WebParam(name = "callerFid", targetNamespace = "")
        String callerFid,
        @WebParam(name = "samlAssertionOrToken", targetNamespace = "")
        String samlAssertionOrToken)
        throws IMSServiceSecurityCallNotAllowedException_Exception, InvalidImsServiceMethodArgumentException_Exception, LdapTemplateNotReadyException_Exception, RequestedEntryNotExistsException_Exception, SecuredImsException_Exception, UnexpectedLdapResponseException_Exception, UnexpectedRuntimeImsException_Exception
    ;

}
